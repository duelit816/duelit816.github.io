{"version":3,"sources":["webpack:///src/app/features/admin/pages/tournaments/tournaments-routing.module.ts","webpack:///src/app/features/admin/pages/tournaments/tournaments.component.ts","webpack:///src/app/features/admin/pages/tournaments/tournaments.component.html","webpack:///src/app/features/admin/pages/tournaments/tournaments.module.ts","webpack:///src/app/shared/components/date-time-picker/date-time-picker.component.ts","webpack:///src/app/shared/components/date-time-picker/date-time-picker.component.html","webpack:///src/app/shared/components/date-time-picker/date-time-picker.module.ts"],"names":["routes","path","component","TournamentsRoutingModule","forChild","imports","exports","TournamentsComponent","api","fb","loginService","toast","games$","get","Games","now","minDate","year","month","day","tournamentForm","group","dateTime","hour","minute","game","required","playerCount","min","value","tournamentFormValue","tournamentDetails","tournament_type","interval","user_id","user","id","game_id","minimum_players","started_at","utc","format","post","CreateTournament","body","opts","addSecurity","pipe","err","error","statusText","message","subscribe","success","createTournament","selector","templateUrl","styleUrls","TournamentsModule","declarations","DateTimePickerComponent","meridian","onChange","onTouch","dateTimeForm","date","time","valueChanges","setValue","fn","toggleMeridian","DateTimePickerModule"],"mappings":"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","file":"pages-tournaments-tournaments-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { TournamentsComponent } from './tournaments.component';\r\n\r\nconst routes: Routes = [{ path: '', component: TournamentsComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TournamentsRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ApiService } from '@core/services/api.service';\r\nimport { LoginService } from '@core/services/login.service';\r\nimport { ToastService } from '@core/services/toast.service';\r\nimport { NgbDate } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TournamentsApi, ValuesApi } from '@shared/constants/api';\r\nimport * as moment from 'moment';\r\nimport { NEVER, Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { GameOptionModel } from './models/game-option.model';\r\n\r\n@Component({\r\n  selector: 'duelit-tournaments',\r\n  templateUrl: './tournaments.component.html',\r\n  styleUrls: ['./tournaments.component.scss']\r\n})\r\nexport class TournamentsComponent implements OnInit {\r\n  games$: Observable<GameOptionModel>;\r\n  minDate: NgbDate;\r\n  tournamentForm: FormGroup;\r\n\r\n  constructor(\r\n    private api: ApiService,\r\n    private fb: FormBuilder,\r\n    private loginService: LoginService,\r\n    private toast: ToastService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.games$ = this.api.get(ValuesApi.Games) as Observable<GameOptionModel>;\r\n    const now = moment();\r\n    this.minDate = new NgbDate(now.year(), now.month() + 1, now.day());\r\n\r\n    this.tournamentForm = this.fb.group({\r\n      dateTime: new FormControl({\r\n        year: now.year(),\r\n        month: now.month() + 1,\r\n        day: now.day(),\r\n        hour: now.hour(),\r\n        minute: now.minute(),\r\n      }),\r\n      game: new FormControl('', Validators.required),\r\n      playerCount: new FormControl(2, [Validators.required, Validators.min(2)])\r\n    });\r\n  }\r\n\r\n  isCreateDisabled(): boolean {\r\n    return this.tournamentForm.value.game === '';\r\n  }\r\n\r\n  createTournament() {\r\n    const tournamentFormValue = this.tournamentForm.value;\r\n    const dateTime = tournamentFormValue.dateTime;\r\n\r\n    const tournamentDetails = {\r\n      tournament_type: 'public',\r\n      interval: 300000,\r\n      user_id: this.loginService.user.id,\r\n      game_id: tournamentFormValue.game,\r\n      minimum_players: tournamentFormValue.playerCount,\r\n      started_at: moment().year(dateTime.year).month(dateTime.month + 1).day(dateTime.day)\r\n        .hour(dateTime.hour).minute(dateTime.minute).utc().format('DD/MM/YYYY HH:mm:ss'),\r\n    };\r\n\r\n    this.api.post(TournamentsApi.CreateTournament, {\r\n      body: tournamentDetails,\r\n      opts: { addSecurity: false }\r\n    }).pipe(\r\n      catchError(err => {\r\n        this.toast.error(err.error || err.statusText || err.message);\r\n        return NEVER;\r\n      })\r\n    ).subscribe(() => {\r\n      this.toast.success('Tournament created successfully.');\r\n    });\r\n  }\r\n}\r\n","<duelit-panel head=\"Create a tournament\">\r\n  <div class=\"row\" [formGroup]=\"tournamentForm\">\r\n    <div class=\"date-time col-md\">\r\n      <label>Date and Time</label>\r\n      <duelit-date-time-picker [minDate]=\"minDate\" formControlName=\"dateTime\"></duelit-date-time-picker>\r\n    </div>\r\n\r\n    <div class=\"game-details col-md\">\r\n      <div>\r\n        <div class=\"form-group\">\r\n          <label>Game</label>\r\n          <select formControlName=\"status\" class=\"form-control\" formControlName=\"game\">\r\n            <option [value]=\"''\">Select Game</option>\r\n            <ng-container *ngIf=\"games$ | async; let games\">\r\n              <option *ngFor=\"let game of games\" [value]=\"game.id\">{{game.title}}</option>\r\n            </ng-container>\r\n          </select>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label>Minimum Players</label>\r\n          <input type=\"number\" min=\"2\" class=\"form-control\" formControlName=\"playerCount\">\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <button class=\"btn custom primary\" [disabled]=\"isCreateDisabled()\" (click)=\"createTournament()\">Create</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</duelit-panel>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { DateTimePickerModule } from '@shared/components/date-time-picker/date-time-picker.module';\r\nimport { PanelModule } from '@shared/components/panel';\r\n\r\nimport { TournamentsRoutingModule } from './tournaments-routing.module';\r\nimport { TournamentsComponent } from './tournaments.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [TournamentsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    TournamentsRoutingModule,\r\n    PanelModule,\r\n    DateTimePickerModule,\r\n    ReactiveFormsModule,\r\n  ]\r\n})\r\nexport class TournamentsModule { }\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor, FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { NgbDate } from '@ng-bootstrap/ng-bootstrap';\r\nimport * as moment from 'moment';\r\n\r\nimport { DateTimePickerValueModel } from './date-time-picker-value.model';\r\n\r\n@Component({\r\n  selector: 'duelit-date-time-picker',\r\n  templateUrl: './date-time-picker.component.html',\r\n  styleUrls: ['./date-time-picker.component.scss']\r\n})\r\nexport class DateTimePickerComponent implements OnInit, ControlValueAccessor {\r\n\r\n  @Input() minDate?: NgbDate;\r\n  dateTimeForm: FormGroup;\r\n  meridian = true;\r\n\r\n  onChange: (dateTimeValue: DateTimePickerValueModel) => unknown = () => {};\r\n  onTouch: any = () => {};\r\n\r\n  constructor(\r\n    private fb: FormBuilder\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    const now = moment();\r\n\r\n    this.dateTimeForm = this.fb.group({\r\n      date: new FormControl({\r\n        year: now.year(),\r\n        month: now.month() + 1,\r\n        day: now.day()\r\n      }),\r\n      time: new FormControl({\r\n        hour: now.hour(),\r\n        minute: now.minute()\r\n      })\r\n    });\r\n\r\n    this.dateTimeForm.valueChanges.subscribe(value => {\r\n      this.onChange({\r\n        year: value.date.year,\r\n        month: value.date.month,\r\n        day: value.date.day,\r\n        hour: value.date.hour,\r\n        minute: value.date.minute,\r\n      });\r\n    });\r\n  }\r\n\r\n  toggleMeridian() {\r\n    this.meridian = !this.meridian;\r\n  }\r\n\r\n\r\n  writeValue(value: DateTimePickerValueModel) {\r\n    this.dateTimeForm.setValue({\r\n      date: {\r\n        year: value.year,\r\n        month: value.month,\r\n        day: value.day\r\n      },\r\n      time: {\r\n        hour: value.hour,\r\n        minute: value.minute\r\n      }\r\n    });\r\n  }\r\n\r\n  registerOnChange(fn: (dateTimeValue: DateTimePickerValueModel) => unknown) { this.onChange = fn; }\r\n\r\n  registerOnTouched(fn: any) { this.onTouch = fn; }\r\n}\r\n","\r\n<ng-container [formGroup]=\"dateTimeForm\">\r\n  <div>\r\n    <button class=\"btn btn-sm btn-outline-{{meridian ? 'success' : 'danger'}}\" (click)=\"toggleMeridian()\">\r\n        Meridian - {{meridian ? \"ON\" : \"OFF\"}}\r\n    </button>\r\n  </div>\r\n  <ngb-timepicker formControlName=\"time\" [meridian]=\"meridian\"></ngb-timepicker>\r\n\r\n  <ngb-datepicker formControlName=\"date\" [minDate]=\"minDate\"></ngb-datepicker>\r\n\r\n</ng-container>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { NgbDatepickerModule, NgbTimepickerModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { DateTimePickerComponent } from './date-time-picker.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [DateTimePickerComponent],\r\n  imports: [\r\n    CommonModule,\r\n    NgbDatepickerModule,\r\n    NgbTimepickerModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  exports: [DateTimePickerComponent]\r\n})\r\nexport class DateTimePickerModule { }\r\n"]}