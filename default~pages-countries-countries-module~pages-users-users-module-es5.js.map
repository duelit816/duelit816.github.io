{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/sort.js"],"names":["_c0","MatSortHeader_div_3_Template","rf","ctx","_r46","MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener","ctx_r45","_disableViewStateAnimation","MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener","ctx_r47","ctx_r44","_getArrowViewState","_getArrowDirectionState","_c1","getSortDuplicateSortableIdError","id","Error","getSortHeaderNotContainedWithinSortError","getSortHeaderMissingIdError","getSortInvalidDirectionError","direction","MatSortable","Sort","MatSortBase","_MatSortMixinBase","MatSort","arguments","sortables","Map","_stateChanges","start","_direction","sortChange","sortable","has","set","delete","active","getNextSortDirection","emit","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","length","_markInitialized","next","complete","_disableClear","v","ɵfac","MatSort_Factory","t","ɵMatSort_BaseFactory","ɵdir","type","selectors","hostAttrs","inputs","disabled","outputs","exportAs","features","propDecorators","args","selector","host","sortOrder","reverse","push","SORT_ANIMATION_TRANSITION","ENTERING","STANDARD_CURVE","matSortAnimations","indicator","transform","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","allowChildren","optional","MatSortHeaderIntl","changes","sortButtonLabel","MatSortHeaderIntl_Factory","ɵprov","factory","token","providedIn","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MatSortHeaderBase","_MatSortHeaderMixinBase","ArrowViewStateTransition","MatSortHeaderColumnDef","MatSortHeader","_intl","changeDetectorRef","_sort","_columnDef","_focusMonitor","_elementRef","_showIndicatorHint","_arrowDirection","_rerenderSubscription","subscribe","_isSorted","_updateArrowDirection","_viewState","toState","_setAnimationTransitionState","fromState","markForCheck","monitor","origin","_setIndicatorHintVisible","name","register","stopMonitoring","deregister","unsubscribe","visible","_isDisabled","viewState","sort","MatSortHeader_Factory","ɵcmp","hostVars","hostBindings","MatSortHeader_HostBindings","MatSortHeader_click_HostBindingHandler","_handleClick","MatSortHeader_mouseenter_HostBindingHandler","MatSortHeader_mouseleave_HostBindingHandler","_getAriaSortAttribute","attrs","ngContentSelectors","decls","vars","consts","template","MatSortHeader_Template","_renderArrow","directives","styles","encapsulation","data","animation","changeDetection","ctorParameters","decorators","undefined","None","OnPush","animations","MatSortModule","ɵmod","ɵinj","MatSortModule_Factory","providers","imports","ngJitMode","declarations","exports"],"mappings":"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","file":"default~pages-countries-countries-module~pages-users-users-module-es5.js","sourcesContent":["import { EventEmitter, isDevMode, Directive, Input, Output, Injectable, ɵɵdefineInjectable, Optional, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Inject, ElementRef, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/common';\n\nconst _c0 = [\"mat-sort-header\", \"\"];\nfunction MatSortHeader_div_3_Template(rf, ctx) { if (rf & 1) {\n    const _r46 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() { ɵngcc0.ɵɵrestoreView(_r46); const ctx_r45 = ɵngcc0.ɵɵnextContext(); return ctx_r45._disableViewStateAnimation = true; })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() { ɵngcc0.ɵɵrestoreView(_r46); const ctx_r47 = ɵngcc0.ɵɵnextContext(); return ctx_r47._disableViewStateAnimation = false; });\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 5);\n    ɵngcc0.ɵɵelement(3, \"div\", 6);\n    ɵngcc0.ɵɵelement(4, \"div\", 7);\n    ɵngcc0.ɵɵelement(5, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r44 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@arrowOpacity\", ctx_r44._getArrowViewState())(\"@arrowPosition\", ctx_r44._getArrowViewState())(\"@allowChildren\", ctx_r44._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"@indicator\", ctx_r44._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@leftPointer\", ctx_r44._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@rightPointer\", ctx_r44._getArrowDirectionState());\n} }\nconst _c1 = [\"*\"];\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface for a directive that holds sorting state consumed by `MatSortHeader`.\n * @record\n */\nfunction MatSortable() { }\nif (false) {\n    /**\n     * The id of the column being sorted.\n     * @type {?}\n     */\n    MatSortable.prototype.id;\n    /**\n     * Starting sort direction.\n     * @type {?}\n     */\n    MatSortable.prototype.start;\n    /**\n     * Whether to disable clearing the sorting state.\n     * @type {?}\n     */\n    MatSortable.prototype.disableClear;\n}\n/**\n * The current sort state.\n * @record\n */\nfunction Sort() { }\nif (false) {\n    /**\n     * The id of the column being sorted.\n     * @type {?}\n     */\n    Sort.prototype.active;\n    /**\n     * The sort direction.\n     * @type {?}\n     */\n    Sort.prototype.direction;\n}\n// Boilerplate for applying mixins to MatSort.\n/**\n * \\@docs-private\n */\nclass MatSortBase {\n}\n/** @type {?} */\nconst _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nclass MatSort extends _MatSortMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes.\n         */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        this.sortChange = new EventEmitter();\n    }\n    /**\n     * The sort direction of the currently active MatSortable.\n     * @return {?}\n     */\n    get direction() { return this._direction; }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    set direction(direction) {\n        if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    register(sortable) {\n        if (!sortable.id) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    getNextSortDirection(sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        /** @type {?} */\n        const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        /** @type {?} */\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        /** @type {?} */\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.ɵfac = function MatSort_Factory(t) { return ɵMatSort_BaseFactory(t || MatSort); };\nMatSort.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSort, selectors: [[\"\", \"matSort\", \"\"]], hostAttrs: [1, \"mat-sort\"], inputs: { disabled: [\"matSortDisabled\", \"disabled\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\"], active: [\"matSortActive\", \"active\"] }, outputs: { sortChange: \"matSortChange\" }, exportAs: [\"matSort\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()] });\nMatSort.propDecorators = {\n    active: [{ type: Input, args: ['matSortActive',] }],\n    start: [{ type: Input, args: ['matSortStart',] }],\n    direction: [{ type: Input, args: ['matSortDirection',] }],\n    disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\n    sortChange: [{ type: Output, args: ['matSortChange',] }]\n};\nconst ɵMatSort_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSort);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSort, [{\n        type: Directive,\n        args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                host: { 'class': 'mat-sort' },\n                inputs: ['disabled: matSortDisabled']\n            }]\n    }], null, { start: [{\n            type: Input,\n            args: ['matSortStart']\n        }], sortChange: [{\n            type: Output,\n            args: ['matSortChange']\n        }], direction: [{\n            type: Input,\n            args: ['matSortDirection']\n        }], disableClear: [{\n            type: Input,\n            args: ['matSortDisableClear']\n        }], active: [{\n            type: Input,\n            args: ['matSortActive']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatSort.ngAcceptInputType_disableClear;\n    /** @type {?} */\n    MatSort.ngAcceptInputType_disabled;\n    /**\n     * Collection of all registered sortables that this directive manages.\n     * @type {?}\n     */\n    MatSort.prototype.sortables;\n    /**\n     * Used to notify any child components listening to state changes.\n     * @type {?}\n     */\n    MatSort.prototype._stateChanges;\n    /**\n     * The id of the most recently sorted MatSortable.\n     * @type {?}\n     */\n    MatSort.prototype.active;\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     * @type {?}\n     */\n    MatSort.prototype.start;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSort.prototype._direction;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSort.prototype._disableClear;\n    /**\n     * Event emitted when the user changes either the active sort or sort direction.\n     * @type {?}\n     */\n    MatSort.prototype.sortChange;\n}\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    /** @type {?} */\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\nconst matSortAnimations = {\n    /**\n     * Animation that moves the sort indicator.\n     */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the left pointer of the indicator based on the sorting direction.\n     */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the right pointer of the indicator based on the sorting direction.\n     */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that controls the arrow opacity.\n     */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(-25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(-25%)' })\n        ]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /**\n     * Necessary trigger that calls animate on children animations.\n     */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [\n            query('@*', animateChild(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-header-intl.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button.\n         */\n        this.sortButtonLabel = (/**\n         * @param {?} id\n         * @return {?}\n         */\n        (id) => {\n            return `Change sorting for ${id}`;\n        });\n    }\n}\nMatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) { return new (t || MatSortHeaderIntl)(); };\n/** @nocollapse */ MatSortHeaderIntl.ɵprov = ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSortHeaderIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\nif (false) {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     * @type {?}\n     */\n    MatSortHeaderIntl.prototype.changes;\n    /**\n     * ARIA label for the sorting button.\n     * @type {?}\n     */\n    MatSortHeaderIntl.prototype.sortButtonLabel;\n}\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-header.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n/**\n * \\@docs-private\n */\nclass MatSortHeaderBase {\n}\n/** @type {?} */\nconst _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * \\@docs-private\n * @record\n */\nfunction ArrowViewStateTransition() { }\nif (false) {\n    /** @type {?|undefined} */\n    ArrowViewStateTransition.prototype.fromState;\n    /** @type {?} */\n    ArrowViewStateTransition.prototype.toState;\n}\n/**\n * Column definition associated with a `MatSortHeader`.\n * @record\n */\nfunction MatSortHeaderColumnDef() { }\nif (false) {\n    /** @type {?} */\n    MatSortHeaderColumnDef.prototype.name;\n}\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n    /**\n     * @param {?} _intl\n     * @param {?} changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _columnDef\n     * @param {?=} _focusMonitor\n     * @param {?=} _elementRef\n     */\n    constructor(_intl, changeDetectorRef, _sort, _columnDef, _focusMonitor, _elementRef) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        this._focusMonitor = _focusMonitor;\n        this._elementRef = _elementRef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The direction the arrow should be facing according to the current state.\n         */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            changeDetectorRef.markForCheck();\n        }));\n        if (_focusMonitor && _elementRef) {\n            // We use the focus monitor because we also want to style\n            // things differently based on the focus origin.\n            _focusMonitor.monitor(_elementRef, true)\n                .subscribe((/**\n             * @param {?} origin\n             * @return {?}\n             */\n            origin => this._setIndicatorHintVisible(!!origin)));\n        }\n    }\n    /**\n     * Overrides the disable clear value of the containing MatSort for this MatSortable.\n     * @return {?}\n     */\n    get disableClear() { return this._disableClear; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // @breaking-change 10.0.0 Remove null check for _focusMonitor and _elementRef.\n        if (this._focusMonitor && this._elementRef) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState;\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n    _handleClick() {\n        if (this._isDisabled()) {\n            return;\n        }\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n        // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n        // the direction it is facing.\n        /** @type {?} */\n        const viewState = this._isSorted() ?\n            { fromState: this._arrowDirection, toState: 'active' } :\n            { fromState: 'active', toState: this._arrowDirection };\n        this._setAnimationTransitionState(viewState);\n        this._showIndicatorHint = false;\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n    _getArrowViewState() {\n        /** @type {?} */\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    }\n    /**\n     * @return {?}\n     */\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return null;\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /**\n     * Whether the arrow inside the sort header should be rendered.\n     * @return {?}\n     */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n}\nMatSortHeader.ɵfac = function MatSortHeader_Factory(t) { return new (t || MatSortHeader)(ɵngcc0.ɵɵdirectiveInject(MatSortHeaderIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSort, 8), ɵngcc0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatSortHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSortHeader, selectors: [[\"\", \"mat-sort-header\", \"\"]], hostAttrs: [1, \"mat-sort-header\"], hostVars: 3, hostBindings: function MatSortHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() { return ctx._handleClick(); })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() { return ctx._setIndicatorHintVisible(true); })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() { return ctx._setIndicatorHintVisible(false); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n    } }, inputs: { disabled: \"disabled\", arrowPosition: \"arrowPosition\", disableClear: \"disableClear\", id: [\"mat-sort-header\", \"id\"], start: \"start\" }, exportAs: [\"matSortHeader\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 7, consts: [[1, \"mat-sort-header-container\"], [\"type\", \"button\", 1, \"mat-sort-header-button\", \"mat-focus-indicator\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]], template: function MatSortHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx._isDisabled() || null)(\"aria-label\", ctx._intl.sortButtonLabel(ctx.id));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._renderArrow());\n    } }, directives: [ɵngcc2.NgIf], styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor;position:relative}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-button,[mat-sort-header].cdk-program-focused .mat-sort-header-button{border-bottom:solid 1px currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"], encapsulation: 2, data: { animation: [\n            matSortAnimations.indicator,\n            matSortAnimations.leftPointer,\n            matSortAnimations.rightPointer,\n            matSortAnimations.arrowOpacity,\n            matSortAnimations.arrowPosition,\n            matSortAnimations.allowChildren,\n        ] }, changeDetection: 0 });\n/** @nocollapse */\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl },\n    { type: ChangeDetectorRef },\n    { type: MatSort, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] },\n    { type: FocusMonitor },\n    { type: ElementRef }\n];\nMatSortHeader.propDecorators = {\n    id: [{ type: Input, args: ['mat-sort-header',] }],\n    arrowPosition: [{ type: Input }],\n    start: [{ type: Input }],\n    disableClear: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSortHeader, [{\n        type: Component,\n        args: [{\n                selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<div class=\\\"mat-sort-header-container\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\">\\n  <button class=\\\"mat-sort-header-button mat-focus-indicator\\\" type=\\\"button\\\"\\n          [attr.disabled]=\\\"_isDisabled() || null\\\"\\n          [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\">\\n    <ng-content></ng-content>\\n  </button>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                host: {\n                    'class': 'mat-sort-header',\n                    '(click)': '_handleClick()',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ],\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor;position:relative}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-button,[mat-sort-header].cdk-program-focused .mat-sort-header-button{border-bottom:solid 1px currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatSortHeaderIntl }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSort, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: ['MAT_SORT_HEADER_COLUMN_DEF']\n            }, {\n                type: Optional\n            }] }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }]; }, { arrowPosition: [{\n            type: Input\n        }], disableClear: [{\n            type: Input\n        }], id: [{\n            type: Input,\n            args: ['mat-sort-header']\n        }], start: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatSortHeader.ngAcceptInputType_disableClear;\n    /** @type {?} */\n    MatSortHeader.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSortHeader.prototype._rerenderSubscription;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     * @type {?}\n     */\n    MatSortHeader.prototype._showIndicatorHint;\n    /**\n     * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n     * position through the animation. If animations are currently disabled, the fromState is removed\n     * so that there is no animation displayed.\n     * @type {?}\n     */\n    MatSortHeader.prototype._viewState;\n    /**\n     * The direction the arrow should be facing according to the current state.\n     * @type {?}\n     */\n    MatSortHeader.prototype._arrowDirection;\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     * @type {?}\n     */\n    MatSortHeader.prototype._disableViewStateAnimation;\n    /**\n     * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n     * the column's name.\n     * @type {?}\n     */\n    MatSortHeader.prototype.id;\n    /**\n     * Sets the position of the arrow that displays when sorted.\n     * @type {?}\n     */\n    MatSortHeader.prototype.arrowPosition;\n    /**\n     * Overrides the sort start value of the containing MatSort for this MatSortable.\n     * @type {?}\n     */\n    MatSortHeader.prototype.start;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSortHeader.prototype._disableClear;\n    /** @type {?} */\n    MatSortHeader.prototype._intl;\n    /** @type {?} */\n    MatSortHeader.prototype._sort;\n    /** @type {?} */\n    MatSortHeader.prototype._columnDef;\n    /**\n     * @deprecated _focusMonitor and _elementRef to become required parameters.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     * @private\n     */\n    MatSortHeader.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSortHeader.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSortModule {\n}\nMatSortModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSortModule });\nMatSortModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSortModule_Factory(t) { return new (t || MatSortModule)(); }, providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [[CommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSortModule, { declarations: function () { return [MatSort,\n        MatSortHeader]; }, imports: function () { return [CommonModule]; }, exports: function () { return [MatSort,\n        MatSortHeader]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSortModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-direction.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n\n//# sourceMappingURL=sort.js.map"]}