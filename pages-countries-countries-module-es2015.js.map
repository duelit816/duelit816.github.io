{"version":3,"sources":["./src/app/features/admin/pages/countries/countries-routing.module.ts","./src/app/features/admin/pages/countries/countries.component.ts","./src/app/features/admin/pages/countries/countries.component.html","./src/app/features/admin/pages/countries/countries.module.ts"],"names":[],"mappings":"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","file":"pages-countries-countries-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CountriesComponent } from './countries.component';\r\n\r\nconst routes: Routes = [{ path: '', component: CountriesComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CountriesRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { ApiService } from '@core/services/api.service';\r\nimport { ToastService } from '@core/services/toast.service';\r\nimport { CountriesApi } from '@shared/constants/api';\r\nimport { BehaviorSubject, combineLatest, NEVER, Observable, of } from 'rxjs';\r\nimport { catchError, debounceTime, distinctUntilChanged, startWith, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { CountriesApiResponse } from './model/countries-api-response.model';\r\nimport { Country } from './model/country.model';\r\n\r\n@Component({\r\n  selector: 'duelit-countries',\r\n  templateUrl: './countries.component.html',\r\n  styleUrls: ['../users/users.component.scss', './countries.component.scss']\r\n})\r\nexport class CountriesComponent implements OnInit {\r\n  countriesPaginated$: Observable<CountriesApiResponse>;\r\n  filterFormGroup: FormGroup;\r\n  displayedColumns = ['code', 'name', 'fortrivia', 'allowed'];\r\n  sortDirection$ = new BehaviorSubject<Sort>({\r\n    active: 'name',\r\n    direction: 'asc'\r\n  });\r\n  page$ = new BehaviorSubject(1);\r\n  isLoading = false;\r\n\r\n  constructor(\r\n    private api: ApiService,\r\n    private fb: FormBuilder,\r\n    private toast: ToastService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.filterFormGroup = this.fb.group({\r\n      code: new FormControl(),\r\n      name: new FormControl()\r\n    });\r\n\r\n    this.countriesPaginated$ = combineLatest([\r\n      this.page$,\r\n      this.sortDirection$,\r\n      this.filterFormGroup.valueChanges.pipe(startWith(this.filterFormGroup.value))\r\n    ]).pipe(\r\n      tap(() => this.isLoading = true),\r\n      distinctUntilChanged(),\r\n      debounceTime(500),\r\n      switchMap(([page, sortDirection, filterValue]) => {\r\n        const limit = 10;\r\n\r\n        const path = this.api.buildPath(CountriesApi.CountriesPaginated, {\r\n          page: (page - 1) * limit,\r\n          limit,\r\n          order: sortDirection.active\r\n        });\r\n\r\n        return this.api.get(path, {\r\n          query: {\r\n            name: filterValue.name || '',\r\n            code: filterValue.code || ''\r\n          }\r\n        }).pipe(\r\n          tap(() => this.isLoading = false),\r\n          catchError(err => {\r\n            this.isLoading = false;\r\n            this.toast.error(err.error || err.statusText || err.message);\r\n            return of({\r\n              pages: 0,\r\n              rows: []\r\n            });\r\n          })\r\n        ) as Observable<CountriesApiResponse>;\r\n      }),\r\n      startWith({\r\n        pages: 0,\r\n        rows: []\r\n      })\r\n    );\r\n  }\r\n\r\n  sortData(sort: Sort) {\r\n    console.log(sort);\r\n    if (sort.direction === '') {\r\n      this.sortDirection$.next({\r\n        active: 'name',\r\n        direction: 'asc'\r\n      });\r\n    } else {\r\n      this.sortDirection$.next(sort);\r\n    }\r\n  }\r\n\r\n  onPageChange(page: number) {\r\n    this.page$.next(page);\r\n  }\r\n\r\n  updateCountry(column: string, value: boolean, country: Country, input) {\r\n    const countryToUpdate = {\r\n      id: country.id,\r\n    };\r\n    countryToUpdate[column] = value ? 1 : 0;\r\n\r\n    this.api.put(CountriesApi.UpdateCountry, {\r\n      body: countryToUpdate,\r\n      opts: { addSecurity: false }\r\n    }).pipe(\r\n      tap(() => this.isLoading = true),\r\n      catchError(err => {\r\n        this.isLoading = false;\r\n        input.checked = !value;\r\n        this.toast.error(err.error || err.statusText || err.message);\r\n        return NEVER;\r\n      })\r\n    ).subscribe(() => {\r\n      this.isLoading = false;\r\n      this.toast.success(`Successfully updated ${country.name}. Updated ${column === 'allowed' ? 'Allowed' : 'For Trivia'} to ${value}`);\r\n    });\r\n  }\r\n}\r\n","\r\n<ng-container *ngIf=\"countriesPaginated$ | async; let countriesPaginated\">\r\n\r\n  <table mat-table [dataSource]=\"countriesPaginated.rows\" matSort (matSortChange)=\"sortData($event)\" class=\"mat-elevation-z8\" [formGroup]=\"filterFormGroup\" [class.loading]=\"isLoading\">\r\n\r\n    <ng-container matColumnDef=\"code\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Code</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.code}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"fortrivia\">\r\n      <th mat-header-cell *matHeaderCellDef> For Trivia </th>\r\n      <td mat-cell *matCellDef=\"let element\">\r\n        <label class=\"switch\">\r\n          <input type=\"checkbox\" (change)=\"updateCountry('fortrivia', $event.target.checked, element, $event.target)\" [attr.checked]=\"element.fortrivia ? true : undefined\">\r\n          <span class=\"slider round\"></span>\r\n        </label>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"allowed\">\r\n      <th mat-header-cell *matHeaderCellDef> Allowed </th>\r\n      <td mat-cell *matCellDef=\"let element\">\r\n        <label class=\"switch\">\r\n          <input type=\"checkbox\" (change)=\"updateCountry('allowed', $event.target.checked, element, $event.target)\" [attr.checked]=\"element.allowed ? true : undefined\">\r\n          <span class=\"slider round\"></span>\r\n        </label> </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"code-search\">\r\n      <th mat-header-cell *matHeaderCellDef class=\"form-group\"> <input type=\"text\" class=\"form-control\" formControlName=\"code\"> </th>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"name-search\">\r\n      <th mat-header-cell *matHeaderCellDef class=\"form-group\"> <input type=\"text\" class=\"form-control\" formControlName=\"name\"> </th>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"fortrivia-search\">\r\n      <th mat-header-cell *matHeaderCellDef class=\"form-group\">&nbsp;</th>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"allowed-search\">\r\n      <th mat-header-cell *matHeaderCellDef class=\"form-group\">&nbsp;</th>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\" class=\"named-columns\"></tr>\r\n    <tr mat-header-row *matHeaderRowDef=\"[\r\n      'code-search',\r\n      'name-search',\r\n      'fortrivia-search',\r\n      'allowed-search'\r\n    ]; sticky: true\"></tr>\r\n\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n\r\n  <ngb-pagination class=\"d-flex justify-content-center\"\r\n    [collectionSize]=\"countriesPaginated.pages * 10\"\r\n    [pageSize]=\"10\" [page]=\"page$ | async\"\r\n    [maxSize]=\"4\" [rotate]=\"true\"\r\n    (pageChange)=\"onPageChange($event)\">\r\n  </ngb-pagination>\r\n</ng-container>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { CountriesRoutingModule } from './countries-routing.module';\r\nimport { CountriesComponent } from './countries.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [CountriesComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CountriesRoutingModule,\r\n    ReactiveFormsModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    NgbPaginationModule\r\n  ]\r\n})\r\nexport class CountriesModule { }\r\n"],"sourceRoot":"webpack:///"}