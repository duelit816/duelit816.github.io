{"version":3,"sources":["webpack:///src/app/features/admin/pages/countries/countries-routing.module.ts","webpack:///src/app/features/admin/pages/countries/countries.component.ts","webpack:///src/app/features/admin/pages/countries/countries.component.html","webpack:///src/app/features/admin/pages/countries/countries.module.ts"],"names":["routes","path","component","CountriesRoutingModule","forChild","imports","exports","$event","target","checked","CountriesComponent","api","fb","toast","displayedColumns","sortDirection$","active","direction","page$","isLoading","filterFormGroup","group","code","name","countriesPaginated$","valueChanges","pipe","value","page","sortDirection","filterValue","limit","buildPath","CountriesPaginated","order","get","query","err","error","statusText","message","pages","rows","sort","console","log","next","column","country","input","countryToUpdate","id","put","UpdateCountry","body","opts","addSecurity","subscribe","success","selector","templateUrl","styleUrls","CountriesModule","declarations"],"mappings":"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","file":"pages-countries-countries-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CountriesComponent } from './countries.component';\r\n\r\nconst routes: Routes = [{ path: '', component: CountriesComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CountriesRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { Sort } from '@angular/material/sort';\r\nimport { ApiService } from '@core/services/api.service';\r\nimport { ToastService } from '@core/services/toast.service';\r\nimport { CountriesApi } from '@shared/constants/api';\r\nimport { BehaviorSubject, combineLatest, NEVER, Observable, of } from 'rxjs';\r\nimport { catchError, debounceTime, distinctUntilChanged, startWith, switchMap, tap } from 'rxjs/operators';\r\n\r\nimport { CountriesApiResponse } from './model/countries-api-response.model';\r\nimport { Country } from './model/country.model';\r\n\r\n@Component({\r\n  selector: 'duelit-countries',\r\n  templateUrl: './countries.component.html',\r\n  styleUrls: ['../users/users.component.scss', './countries.component.scss']\r\n})\r\nexport class CountriesComponent implements OnInit {\r\n  countriesPaginated$: Observable<CountriesApiResponse>;\r\n  filterFormGroup: FormGroup;\r\n  displayedColumns = ['code', 'name', 'fortrivia', 'allowed'];\r\n  sortDirection$ = new BehaviorSubject<Sort>({\r\n    active: 'name',\r\n    direction: 'asc'\r\n  });\r\n  page$ = new BehaviorSubject(1);\r\n  isLoading = false;\r\n\r\n  constructor(\r\n    private api: ApiService,\r\n    private fb: FormBuilder,\r\n    private toast: ToastService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.filterFormGroup = this.fb.group({\r\n      code: new FormControl(),\r\n      name: new FormControl()\r\n    });\r\n\r\n    this.countriesPaginated$ = combineLatest([\r\n      this.page$,\r\n      this.sortDirection$,\r\n      this.filterFormGroup.valueChanges.pipe(startWith(this.filterFormGroup.value))\r\n    ]).pipe(\r\n      tap(() => this.isLoading = true),\r\n      distinctUntilChanged(),\r\n      debounceTime(500),\r\n      switchMap(([page, sortDirection, filterValue]) => {\r\n        const limit = 10;\r\n\r\n        const path = this.api.buildPath(CountriesApi.CountriesPaginated, {\r\n          page: (page - 1) * limit,\r\n          limit,\r\n          order: sortDirection.active\r\n        });\r\n\r\n        return this.api.get(path, {\r\n          query: {\r\n            name: filterValue.name || '',\r\n            code: filterValue.code || ''\r\n          }\r\n        }).pipe(\r\n          tap(() => this.isLoading = false),\r\n          catchError(err => {\r\n            this.isLoading = false;\r\n            this.toast.error(err.error || err.statusText || err.message);\r\n            return of({\r\n              pages: 0,\r\n              rows: []\r\n            });\r\n          })\r\n        ) as Observable<CountriesApiResponse>;\r\n      }),\r\n      startWith({\r\n        pages: 0,\r\n        rows: []\r\n      })\r\n    );\r\n  }\r\n\r\n  sortData(sort: Sort) {\r\n    console.log(sort);\r\n    if (sort.direction === '') {\r\n      this.sortDirection$.next({\r\n        active: 'name',\r\n        direction: 'asc'\r\n      });\r\n    } else {\r\n      this.sortDirection$.next(sort);\r\n    }\r\n  }\r\n\r\n  onPageChange(page: number) {\r\n    this.page$.next(page);\r\n  }\r\n\r\n  updateCountry(column: string, value: boolean, country: Country, input) {\r\n    const countryToUpdate = {\r\n      id: country.id,\r\n    };\r\n    countryToUpdate[column] = value ? 1 : 0;\r\n\r\n    this.api.put(CountriesApi.UpdateCountry, {\r\n      body: countryToUpdate,\r\n      opts: { addSecurity: false }\r\n    }).pipe(\r\n      tap(() => this.isLoading = true),\r\n      catchError(err => {\r\n        this.isLoading = false;\r\n        input.checked = !value;\r\n        this.toast.error(err.error || err.statusText || err.message);\r\n        return NEVER;\r\n      })\r\n    ).subscribe(() => {\r\n      this.isLoading = false;\r\n      this.toast.success(`Successfully updated ${country.name}. Updated ${column === 'allowed' ? 'Allowed' : 'For Trivia'} to ${value}`);\r\n    });\r\n  }\r\n}\r\n","\r\n<ng-container *ngIf=\"countriesPaginated$ | async; let countriesPaginated\">\r\n\r\n  <table mat-table [dataSource]=\"countriesPaginated.rows\" matSort (matSortChange)=\"sortData($event)\" class=\"mat-elevation-z8\" [formGroup]=\"filterFormGroup\" [class.loading]=\"isLoading\">\r\n\r\n    <ng-container matColumnDef=\"code\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Code</th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.code}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"fortrivia\">\r\n      <th mat-header-cell *matHeaderCellDef> For Trivia </th>\r\n      <td mat-cell *matCellDef=\"let element\">\r\n        <label class=\"switch\">\r\n          <input type=\"checkbox\" (change)=\"updateCountry('fortrivia', $event.target.checked, element, $event.target)\" [attr.checked]=\"element.fortrivia ? true : undefined\">\r\n          <span class=\"slider round\"></span>\r\n        </label>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"allowed\">\r\n      <th mat-header-cell *matHeaderCellDef> Allowed </th>\r\n      <td mat-cell *matCellDef=\"let element\">\r\n        <label class=\"switch\">\r\n          <input type=\"checkbox\" (change)=\"updateCountry('allowed', $event.target.checked, element, $event.target)\" [attr.checked]=\"element.allowed ? true : undefined\">\r\n          <span class=\"slider round\"></span>\r\n        </label> </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"code-search\">\r\n      <th mat-header-cell *matHeaderCellDef class=\"form-group\"> <input type=\"text\" class=\"form-control\" formControlName=\"code\"> </th>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"name-search\">\r\n      <th mat-header-cell *matHeaderCellDef class=\"form-group\"> <input type=\"text\" class=\"form-control\" formControlName=\"name\"> </th>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"fortrivia-search\">\r\n      <th mat-header-cell *matHeaderCellDef class=\"form-group\">&nbsp;</th>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"allowed-search\">\r\n      <th mat-header-cell *matHeaderCellDef class=\"form-group\">&nbsp;</th>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\" class=\"named-columns\"></tr>\r\n    <tr mat-header-row *matHeaderRowDef=\"[\r\n      'code-search',\r\n      'name-search',\r\n      'fortrivia-search',\r\n      'allowed-search'\r\n    ]; sticky: true\"></tr>\r\n\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n\r\n  <ngb-pagination class=\"d-flex justify-content-center\"\r\n    [collectionSize]=\"countriesPaginated.pages * 10\"\r\n    [pageSize]=\"10\" [page]=\"page$ | async\"\r\n    [maxSize]=\"4\" [rotate]=\"true\"\r\n    (pageChange)=\"onPageChange($event)\">\r\n  </ngb-pagination>\r\n</ng-container>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { NgbPaginationModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { CountriesRoutingModule } from './countries-routing.module';\r\nimport { CountriesComponent } from './countries.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [CountriesComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CountriesRoutingModule,\r\n    ReactiveFormsModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    NgbPaginationModule\r\n  ]\r\n})\r\nexport class CountriesModule { }\r\n"]}