{"version":3,"sources":["webpack:///src/app/core/pages/reset-password/reset-password-routing.module.ts","webpack:///src/app/core/pages/reset-password/reset-password.component.ts","webpack:///src/app/core/pages/reset-password/reset-password.component.html","webpack:///src/app/core/pages/reset-password/reset-password.module.ts","webpack:///src/app/core/pages/reset-password/valid-token.resolver.ts"],"names":["routes","path","component","resolve","data","ResetPasswordRoutingModule","forChild","imports","exports","ResetPasswordComponent","router","route","toast","fb","api","countdown","timer$","isResettingPassword","resetPasswordFinished","valid","snapshot","email","token","params","error","subscribe","t","next","complete","navigate","resetPasswordForm","group","password","required","maxLength","minLength","confirm","isPasswordSame","post","ResetPassword","opts","addSecurity","body","get","value","pipe","err","status","result","success","text","JSON","stringify","passwordControl","confirmControl","touched","selector","templateUrl","styleUrls","ResetPasswordModule","declarations","ValidateTokenResolver","state","buildPath","ValidateToken","paramMap","providedIn"],"mappings":"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","file":"pages-reset-password-reset-password-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ResetPasswordComponent } from './reset-password.component';\r\nimport { ValidateTokenResolver } from './valid-token.resolver';\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: ResetPasswordComponent,\r\n  resolve: {\r\n    data: ValidateTokenResolver\r\n  }\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ResetPasswordRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ApiService } from '@core/services/api.service';\r\nimport { ToastService } from '@core/services/toast.service';\r\nimport { UsersApi } from '@shared/constants/api';\r\nimport { countDown } from '@shared/functions/timer.function';\r\nimport { BehaviorSubject, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'duelit-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss', '../login/login.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  readonly countdown = 10;\r\n  timer$ = new BehaviorSubject(this.countdown);\r\n  valid: boolean;\r\n  email: string;\r\n  token: string;\r\n  resetPasswordForm: FormGroup;\r\n  isResettingPassword = false;\r\n  resetPasswordFinished = false;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private toast: ToastService,\r\n    private fb: FormBuilder,\r\n    private api: ApiService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.valid = this.route.snapshot.data.data.valid;\r\n    this.email = this.route.snapshot.data.data.email;\r\n    this.token = this.route.snapshot.params.token;\r\n\r\n    if (!this.valid) {\r\n      this.toast.error('Your link to reset your password seems to be invalid. Please make a new request');\r\n\r\n      countDown(this.countdown).subscribe((t) => {\r\n        this.timer$.next(t);\r\n        if (t <= 0) {\r\n          this.timer$.complete();\r\n          this.router.navigate(['/forgot-password']);\r\n        }\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    this.resetPasswordForm = this.fb.group({\r\n      password: new FormControl('', [Validators.required, Validators.maxLength(24), Validators.minLength(8)]),\r\n      confirm: new FormControl('', [Validators.required, Validators.maxLength(24), Validators.minLength(8)])\r\n    });\r\n  }\r\n\r\n  resetPassword() {\r\n    this.isResettingPassword = true;\r\n\r\n    if (this.isPasswordSame()) {\r\n      this.api.post(UsersApi.ResetPassword, {\r\n        opts: { addSecurity: false },\r\n        body: {\r\n          token: this.token,\r\n          password: this.resetPasswordForm.get('confirm').value,\r\n          email: this.email\r\n        }\r\n      }).pipe(\r\n        catchError(err => {\r\n          if (err.status === 200) {\r\n            return of('successful');\r\n          }\r\n          return of(err);\r\n        })\r\n      ).subscribe((result: any) => {\r\n        this.isResettingPassword = false;\r\n        if (result === 'successful') {\r\n          this.toast.success('Reset password successful');\r\n          this.resetPasswordFinished = true;\r\n\r\n          countDown(this.countdown).subscribe((t) => {\r\n            this.timer$.next(t);\r\n            if (t <= 0) {\r\n              this.timer$.complete();\r\n              this.router.navigate(['/login']);\r\n            }\r\n          });\r\n        } else {\r\n          this.toast.error(result.error.text || JSON.stringify(result.error));\r\n        }\r\n      });\r\n    } else {\r\n      this.toast.error('Passwords do not match');\r\n      this.isResettingPassword = false;\r\n    }\r\n\r\n  }\r\n\r\n  isPasswordSame(): boolean {\r\n    const passwordControl = this.resetPasswordForm.get('password');\r\n    const confirmControl = this.resetPasswordForm.get('confirm');\r\n    return confirmControl.value === passwordControl.value;\r\n  }\r\n\r\n  isControlsTouched(): boolean {\r\n    const passwordControl = this.resetPasswordForm.get('password');\r\n    const confirmControl = this.resetPasswordForm.get('confirm');\r\n\r\n    return passwordControl.touched && confirmControl.touched;\r\n  }\r\n}\r\n","<ng-container *ngIf=\"valid && !resetPasswordFinished; else invalid\">\r\n  <duelit-panel>\r\n    <div class=\"form-group\" [formGroup]=\"resetPasswordForm\">\r\n      <h2>Reset your password</h2>\r\n      <p>Enter your new password below</p>\r\n      <input type=\"password\" placeholder=\"New password\" autocomplete=\"off\" class=\"form-control custom\" formControlName=\"password\" [class.invalid]=\"!isPasswordSame() && isControlsTouched()\">\r\n      <ng-container *ngIf=\"resetPasswordForm.get('password').invalid && resetPasswordForm.get('password').touched\">\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('password').errors.required\">This field is required.</span>\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('password').errors.minlength\">This field can not be less than {{resetPasswordForm.get('password').errors.minlength.requiredLength}} characters.</span>\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('password').errors.maxlength\">This field can be at most {{resetPasswordForm.get('password').errors.maxlength.requiredLength}} characters long.</span>\r\n      </ng-container>\r\n\r\n      <input type=\"password\" placeholder=\"Repeat new password\" autocomplete=\"off\" class=\"form-control custom\" formControlName=\"confirm\" [class.invalid]=\"!isPasswordSame() && isControlsTouched()\">\r\n      <ng-container *ngIf=\"resetPasswordForm.get('confirm').invalid && resetPasswordForm.get('confirm').touched\">\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('confirm').errors.required\">This field is required.</span>\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('confirm').errors.minlength\">This field can not be less than {{resetPasswordForm.get('confirm').errors.minlength.requiredLength}} characters.</span>\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('confirm').errors.maxlength\">This field can be at most {{resetPasswordForm.get('confirm').errors.maxlength.requiredLength}} characters long.</span>\r\n      </ng-container>\r\n\r\n      <button class=\"btn custom primary\" [disabled]=\"resetPasswordForm.invalid || !isPasswordSame() || isResettingPassword\" (click)=\"resetPassword()\">\r\n        <span *ngIf=\"isResettingPassword; else reset\" class=\"loading\"></span>\r\n        <ng-template #reset>Send Request</ng-template>\r\n      </button>\r\n      <span class=\"error\" *ngIf=\"!isPasswordSame() && isControlsTouched()\">Password are not the same.</span>\r\n\r\n      <span [routerLink]=\"['/login']\">Back to Login</span>\r\n    </div>\r\n  </duelit-panel>\r\n</ng-container>\r\n\r\n<ng-template #invalid>\r\n  <div class=\"invalid-msg\">\r\n    <ng-container *ngIf=\"resetPasswordFinished; else invalidLink\">\r\n      <h3>Your password was successfully changed.</h3>\r\n      <h3>Redirecting you to Login in {{timer$ | async}}</h3>\r\n      <h3 [routerLink]=\"['/login']\" class=\"link\">Go back to Login.</h3>\r\n    </ng-container>\r\n    <ng-template #invalidLink>\r\n      <h3>Your link seems to be invalid, please request a new forgot password.</h3>\r\n      <h3>Redirecting you to Forgot password page in {{timer$ | async}}</h3>\r\n      <h3 [routerLink]=\"['/forgot-password']\" class=\"link\">Go back to Forgot Password.</h3>\r\n    </ng-template>\r\n  </div>\r\n</ng-template>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { PanelModule } from '@shared/components/panel';\r\n\r\nimport { ResetPasswordRoutingModule } from './reset-password-routing.module';\r\nimport { ResetPasswordComponent } from './reset-password.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ResetPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ResetPasswordRoutingModule,\r\n    PanelModule,\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class ResetPasswordModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { ApiService } from '@core/services/api.service';\r\nimport { UsersApi } from '@shared/constants/api';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nexport interface ValidateTokenResult {\r\n  valid: boolean;\r\n  email: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ValidateTokenResolver implements Resolve<ValidateTokenResult> {\r\n  constructor(private api: ApiService) {}\r\n\r\n  resolve(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<ValidateTokenResult>|Promise<ValidateTokenResult>|ValidateTokenResult {\r\n    const path = this.api.buildPath(UsersApi.ValidateToken, { token: route.paramMap.get('token') });\r\n\r\n    return this.api.get(path).pipe(\r\n      catchError(err => {\r\n        if (err.status === 200) {\r\n          return of(err.error.text);\r\n        }\r\n        return of(null);\r\n      }),\r\n      map((result) => {\r\n        return {\r\n          valid: !!result,\r\n          email: result\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n"]}