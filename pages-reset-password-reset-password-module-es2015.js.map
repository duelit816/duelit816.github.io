{"version":3,"sources":["./src/app/core/pages/reset-password/reset-password-routing.module.ts","./src/app/core/pages/reset-password/reset-password.component.ts","./src/app/core/pages/reset-password/reset-password.component.html","./src/app/core/pages/reset-password/reset-password.module.ts","./src/app/core/pages/reset-password/valid-token.resolver.ts"],"names":[],"mappings":"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","file":"pages-reset-password-reset-password-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { ResetPasswordComponent } from './reset-password.component';\r\nimport { ValidateTokenResolver } from './valid-token.resolver';\r\n\r\nconst routes: Routes = [{\r\n  path: '',\r\n  component: ResetPasswordComponent,\r\n  resolve: {\r\n    data: ValidateTokenResolver\r\n  }\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ResetPasswordRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ApiService } from '@core/services/api.service';\r\nimport { ToastService } from '@core/services/toast.service';\r\nimport { UsersApi } from '@shared/constants/api';\r\nimport { countDown } from '@shared/functions/timer.function';\r\nimport { BehaviorSubject, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'duelit-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss', '../login/login.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  readonly countdown = 10;\r\n  timer$ = new BehaviorSubject(this.countdown);\r\n  valid: boolean;\r\n  email: string;\r\n  token: string;\r\n  resetPasswordForm: FormGroup;\r\n  isResettingPassword = false;\r\n  resetPasswordFinished = false;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private toast: ToastService,\r\n    private fb: FormBuilder,\r\n    private api: ApiService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.valid = this.route.snapshot.data.data.valid;\r\n    this.email = this.route.snapshot.data.data.email;\r\n    this.token = this.route.snapshot.params.token;\r\n\r\n    if (!this.valid) {\r\n      this.toast.error('Your link to reset your password seems to be invalid. Please make a new request');\r\n\r\n      countDown(this.countdown).subscribe((t) => {\r\n        this.timer$.next(t);\r\n        if (t <= 0) {\r\n          this.timer$.complete();\r\n          this.router.navigate(['/forgot-password']);\r\n        }\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    this.resetPasswordForm = this.fb.group({\r\n      password: new FormControl('', [Validators.required, Validators.maxLength(24), Validators.minLength(8)]),\r\n      confirm: new FormControl('', [Validators.required, Validators.maxLength(24), Validators.minLength(8)])\r\n    });\r\n  }\r\n\r\n  resetPassword() {\r\n    this.isResettingPassword = true;\r\n\r\n    if (this.isPasswordSame()) {\r\n      this.api.post(UsersApi.ResetPassword, {\r\n        opts: { addSecurity: false },\r\n        body: {\r\n          token: this.token,\r\n          password: this.resetPasswordForm.get('confirm').value,\r\n          email: this.email\r\n        }\r\n      }).pipe(\r\n        catchError(err => {\r\n          if (err.status === 200) {\r\n            return of('successful');\r\n          }\r\n          return of(err);\r\n        })\r\n      ).subscribe((result: any) => {\r\n        this.isResettingPassword = false;\r\n        if (result === 'successful') {\r\n          this.toast.success('Reset password successful');\r\n          this.resetPasswordFinished = true;\r\n\r\n          countDown(this.countdown).subscribe((t) => {\r\n            this.timer$.next(t);\r\n            if (t <= 0) {\r\n              this.timer$.complete();\r\n              this.router.navigate(['/login']);\r\n            }\r\n          });\r\n        } else {\r\n          this.toast.error(result.error.text || JSON.stringify(result.error));\r\n        }\r\n      });\r\n    } else {\r\n      this.toast.error('Passwords do not match');\r\n      this.isResettingPassword = false;\r\n    }\r\n\r\n  }\r\n\r\n  isPasswordSame(): boolean {\r\n    const passwordControl = this.resetPasswordForm.get('password');\r\n    const confirmControl = this.resetPasswordForm.get('confirm');\r\n    return confirmControl.value === passwordControl.value;\r\n  }\r\n\r\n  isControlsTouched(): boolean {\r\n    const passwordControl = this.resetPasswordForm.get('password');\r\n    const confirmControl = this.resetPasswordForm.get('confirm');\r\n\r\n    return passwordControl.touched && confirmControl.touched;\r\n  }\r\n}\r\n","<ng-container *ngIf=\"valid && !resetPasswordFinished; else invalid\">\r\n  <duelit-panel>\r\n    <div class=\"form-group\" [formGroup]=\"resetPasswordForm\">\r\n      <h2>Reset your password</h2>\r\n      <p>Enter your new password below</p>\r\n      <input type=\"password\" placeholder=\"New password\" autocomplete=\"off\" class=\"form-control custom\" formControlName=\"password\" [class.invalid]=\"!isPasswordSame() && isControlsTouched()\">\r\n      <ng-container *ngIf=\"resetPasswordForm.get('password').invalid && resetPasswordForm.get('password').touched\">\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('password').errors.required\">This field is required.</span>\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('password').errors.minlength\">This field can not be less than {{resetPasswordForm.get('password').errors.minlength.requiredLength}} characters.</span>\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('password').errors.maxlength\">This field can be at most {{resetPasswordForm.get('password').errors.maxlength.requiredLength}} characters long.</span>\r\n      </ng-container>\r\n\r\n      <input type=\"password\" placeholder=\"Repeat new password\" autocomplete=\"off\" class=\"form-control custom\" formControlName=\"confirm\" [class.invalid]=\"!isPasswordSame() && isControlsTouched()\">\r\n      <ng-container *ngIf=\"resetPasswordForm.get('confirm').invalid && resetPasswordForm.get('confirm').touched\">\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('confirm').errors.required\">This field is required.</span>\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('confirm').errors.minlength\">This field can not be less than {{resetPasswordForm.get('confirm').errors.minlength.requiredLength}} characters.</span>\r\n        <span class=\"error\" *ngIf=\"resetPasswordForm.get('confirm').errors.maxlength\">This field can be at most {{resetPasswordForm.get('confirm').errors.maxlength.requiredLength}} characters long.</span>\r\n      </ng-container>\r\n\r\n      <button class=\"btn custom primary\" [disabled]=\"resetPasswordForm.invalid || !isPasswordSame() || isResettingPassword\" (click)=\"resetPassword()\">\r\n        <span *ngIf=\"isResettingPassword; else reset\" class=\"loading\"></span>\r\n        <ng-template #reset>Send Request</ng-template>\r\n      </button>\r\n      <span class=\"error\" *ngIf=\"!isPasswordSame() && isControlsTouched()\">Password are not the same.</span>\r\n\r\n      <span [routerLink]=\"['/login']\">Back to Login</span>\r\n    </div>\r\n  </duelit-panel>\r\n</ng-container>\r\n\r\n<ng-template #invalid>\r\n  <div class=\"invalid-msg\">\r\n    <ng-container *ngIf=\"resetPasswordFinished; else invalidLink\">\r\n      <h3>Your password was successfully changed.</h3>\r\n      <h3>Redirecting you to Login in {{timer$ | async}}</h3>\r\n      <h3 [routerLink]=\"['/login']\" class=\"link\">Go back to Login.</h3>\r\n    </ng-container>\r\n    <ng-template #invalidLink>\r\n      <h3>Your link seems to be invalid, please request a new forgot password.</h3>\r\n      <h3>Redirecting you to Forgot password page in {{timer$ | async}}</h3>\r\n      <h3 [routerLink]=\"['/forgot-password']\" class=\"link\">Go back to Forgot Password.</h3>\r\n    </ng-template>\r\n  </div>\r\n</ng-template>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { PanelModule } from '@shared/components/panel';\r\n\r\nimport { ResetPasswordRoutingModule } from './reset-password-routing.module';\r\nimport { ResetPasswordComponent } from './reset-password.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ResetPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ResetPasswordRoutingModule,\r\n    PanelModule,\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class ResetPasswordModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { ApiService } from '@core/services/api.service';\r\nimport { UsersApi } from '@shared/constants/api';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nexport interface ValidateTokenResult {\r\n  valid: boolean;\r\n  email: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ValidateTokenResolver implements Resolve<ValidateTokenResult> {\r\n  constructor(private api: ApiService) {}\r\n\r\n  resolve(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<ValidateTokenResult>|Promise<ValidateTokenResult>|ValidateTokenResult {\r\n    const path = this.api.buildPath(UsersApi.ValidateToken, { token: route.paramMap.get('token') });\r\n\r\n    return this.api.get(path).pipe(\r\n      catchError(err => {\r\n        if (err.status === 200) {\r\n          return of(err.error.text);\r\n        }\r\n        return of(null);\r\n      }),\r\n      map((result) => {\r\n        return {\r\n          valid: !!result,\r\n          email: result\r\n        };\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}