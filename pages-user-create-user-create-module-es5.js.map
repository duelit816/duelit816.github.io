{"version":3,"sources":["webpack:///src/app/features/admin/pages/user-create/user-create-routing.module.ts","webpack:///src/app/features/admin/pages/user-create/user-create.component.ts","webpack:///src/app/features/admin/pages/user-create/user-create.component.html","webpack:///src/app/features/admin/pages/user-create/user-create.module.ts","webpack:///src/app/shared/functions/date.util.ts","webpack:///src/app/shared/validators/must-match.validator.ts"],"names":["routes","path","component","UserCreateRoutingModule","forChild","imports","exports","UserCreateComponent","api","fb","toast","router","countdown","calendarIcon","successIcon","failedIcon","isCreatingUser","createError","isCreatingDone","minDate","timer$","countries$","get","Countries","pipe","countries","map","country","name","states$","States","today","maxDate","year","month","day","userDetailsForm","group","firstName","required","lastName","email","state","birthDate","password","minLength","confirm","validators","userDetails","value","userToCreate","first_name","last_name","birth_date","format","post","CreateUser","body","err","error","statusText","message","subscribe","createdUser","t","next","complete","navigateToUserProfile","navigate","id","selector","templateUrl","styleUrls","UserCreateModule","declarations","ngbDateToMoment","date","momentToNgbDate","MustMatchValidator","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","setErrors"],"mappings":"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","file":"pages-user-create-user-create-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { UserCreateComponent } from './user-create.component';\r\n\r\nconst routes: Routes = [{ path: '', component: UserCreateComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UserCreateRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ApiService } from '@core/services/api.service';\r\nimport { ToastService } from '@core/services/toast.service';\r\nimport { faCalendarAlt } from '@fortawesome/free-regular-svg-icons';\r\nimport { faCheckCircle, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { NgbDate } from '@ng-bootstrap/ng-bootstrap';\r\nimport { UsersApi, ValuesApi } from '@shared/constants/api';\r\nimport { ngbDateToMoment } from '@shared/functions/date.util';\r\nimport { countDown } from '@shared/functions/timer.function';\r\nimport { EmailValidator } from '@shared/validators';\r\nimport { MustMatchValidator } from '@shared/validators/must-match.validator';\r\nimport * as moment from 'moment';\r\nimport { BehaviorSubject, NEVER, Observable } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { CountryModel } from '../user-edit/models/country.model';\r\n\r\n@Component({\r\n  selector: 'duelit-user-create',\r\n  templateUrl: './user-create.component.html',\r\n  styleUrls: ['./user-create.component.scss']\r\n})\r\nexport class UserCreateComponent implements OnInit {\r\n  countdown = 5;\r\n  calendarIcon = faCalendarAlt;\r\n  successIcon = faCheckCircle;\r\n  failedIcon = faTimesCircle;\r\n  userDetailsForm: FormGroup;\r\n  countries$: Observable<string[]>;\r\n  states$: Observable<string[]>;\r\n  isCreatingUser = false;\r\n  createError = null;\r\n  isCreatingDone = false;\r\n  maxDate: NgbDate;\r\n  minDate = new NgbDate(1900, 1, 1);\r\n  timer$ = new BehaviorSubject(this.countdown);\r\n  createdUser: { id?: string };\r\n\r\n\r\n  constructor(\r\n    private api: ApiService,\r\n    private fb: FormBuilder,\r\n    private toast: ToastService,\r\n    private router: Router,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.countries$ = this.api.get(ValuesApi.Countries).pipe(\r\n      map((countries: CountryModel[] = []) => countries.map(country => country.name))\r\n    );\r\n    this.states$ = this.api.get(ValuesApi.States).pipe(\r\n      map((countries: CountryModel[] = []) => countries.map(country => country.name))\r\n    );\r\n\r\n    const today = moment();\r\n    this.maxDate = new NgbDate(today.year(), today.month() + 1, today.day());\r\n\r\n    this.userDetailsForm = this.fb.group({\r\n      firstName: new FormControl('', Validators.required),\r\n      lastName: new FormControl('', Validators.required),\r\n      email: new FormControl('', [EmailValidator, Validators.required]),\r\n      country: new FormControl('', Validators.required),\r\n      state: new FormControl(),\r\n      birthDate: new FormControl('', Validators.required),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8)]),\r\n      confirm: new FormControl('', [Validators.required, Validators.minLength(8)]),\r\n    }, {\r\n      validators: [ MustMatchValidator('password', 'confirm') ]\r\n    });\r\n  }\r\n\r\n  createUser() {\r\n    this.isCreatingUser = true;\r\n    this.createError = null;\r\n\r\n    const userDetails = {\r\n      ...this.userDetailsForm.value\r\n    };\r\n\r\n    const userToCreate = {\r\n      email: userDetails.email,\r\n      password: userDetails.password,\r\n      first_name: userDetails.firstName,\r\n      last_name: userDetails.lastName,\r\n      country: userDetails.country,\r\n      state: userDetails.state,\r\n      birth_date: ngbDateToMoment(userDetails.birthDate).format('YYYY-MM-DD')\r\n    };\r\n\r\n    this.api.post(UsersApi.CreateUser, {\r\n      body: userToCreate\r\n    })\r\n    .pipe(\r\n      catchError(err => {\r\n        this.isCreatingUser = false;\r\n        this.createError = err.error || err.statusText || err.message || 'Something went wrong on creating the user.';\r\n        this.toast.error(this.createError);\r\n        return NEVER;\r\n      })\r\n    )\r\n    .subscribe((createdUser) => {\r\n      this.createdUser = createdUser;\r\n      countDown(this.countdown).subscribe((t) => {\r\n        this.timer$.next(t);\r\n        if (t <= 0) {\r\n          this.timer$.complete();\r\n          this.navigateToUserProfile();\r\n        }\r\n      });\r\n      this.isCreatingUser = false;\r\n      this.isCreatingDone = true;\r\n    });\r\n  }\r\n\r\n  // createAnother() {\r\n  //   this.isCreatingDone = false;\r\n  //   this.userDetailsForm.reset({\r\n  //     firstName: '',\r\n  //     lastName: '',\r\n  //     email: '',\r\n  //     country: '',\r\n  //     state: null,\r\n  //     birthDate: '',\r\n  //     status: UserStatus.Active,\r\n  //     role: UserRole.Admin,\r\n  //     password: '',\r\n  //     confirm: '',\r\n  //   });\r\n  // }\r\n\r\n  navigateToUserProfile() {\r\n    this.router.navigate([`/admin/user`, this.createdUser.id]);\r\n  }\r\n\r\n  goBack() {\r\n    this.createError = null;\r\n  }\r\n\r\n}\r\n","<div class=\"card\">\r\n  <ng-container *ngIf=\"createError || isCreatingDone; else createUserTemplate\">\r\n    <ng-container *ngIf=\"createError\">\r\n      <div class=\"card-body result\">\r\n        <fa-icon [icon]=\"failedIcon\" class=\"fa-9x failed\"></fa-icon>\r\n        <label class=\"failed\">Failed to create user!</label>\r\n        <label class=\"failed\">Error: {{createError}}</label>\r\n        <button class=\"btn btn-primary custom col\" (click)=\"goBack()\">Go back to user details</button>\r\n        <button class=\"btn btn-primary custom col\" (click)=\"createUser()\">Retry</button>\r\n      </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"isCreatingDone\">\r\n      <div class=\"card-body result\">\r\n        <fa-icon [icon]=\"successIcon\" class=\"fa-9x success\"></fa-icon>\r\n        <label class=\"success\">Successfully Created User!</label>\r\n        <label class=\"success\">Redirecting to user profile in {{timer$ | async}}</label>\r\n        <button class=\"btn btn-primary custom col\" (click)=\"navigateToUserProfile()\">Redirect now</button>\r\n      </div>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <ng-template #createUserTemplate>\r\n    <div class=\"card-header d-flex\">\r\n      <span>Create User</span>\r\n    </div>\r\n    <div class=\"card-body\" [formGroup]=\"userDetailsForm\">\r\n      <div class=\"row\">\r\n        <div class=\"form-group col-6\">\r\n          <label>First Name</label>\r\n          <input type=\"text\" class=\"form-control\" formControlName=\"firstName\">\r\n          <ng-container *ngIf=\"userDetailsForm.get('firstName').invalid && userDetailsForm.get('firstName').touched\">\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('firstName').errors.required\">This field is required.</span>\r\n          </ng-container>\r\n        </div>\r\n        <div class=\"form-group col-6\">\r\n          <label>Last Name</label>\r\n          <input type=\"text\" class=\"form-control\" formControlName=\"lastName\">\r\n          <ng-container *ngIf=\"userDetailsForm.get('lastName').invalid && userDetailsForm.get('lastName').touched\">\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('lastName').errors.required\">This field is required.</span>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Email</label>\r\n        <input type=\"email\" class=\"form-control\" formControlName=\"email\">\r\n        <ng-container *ngIf=\"userDetailsForm.get('email').invalid && userDetailsForm.get('email').touched\">\r\n          <span class=\"error\" *ngIf=\"userDetailsForm.get('email').errors.required\">This field is required.</span>\r\n          <span class=\"error\" *ngIf=\"userDetailsForm.get('email').errors.email\">This field must be a valid email address.</span>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-6 form-group\">\r\n          <label>Country</label>\r\n          <select class=\"form-control\" formControlName=\"country\" aria-placeholder=\"Select Country\" *ngIf=\"countries$ | async; let countries; else loadingSelect\">\r\n            <option *ngFor=\"let country of countries\" [value]=\"country\">{{ country }}</option>\r\n          </select>\r\n          <ng-container *ngIf=\"userDetailsForm.get('country').invalid && userDetailsForm.get('country').touched\">\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('country').errors.required\">This field is required.</span>\r\n          </ng-container>\r\n        </div>\r\n        <div class=\"col-6 form-group\" *ngIf=\"userDetailsForm.get('country').value === 'United States'\">\r\n          <label>State / Province</label>\r\n          <select class=\"form-control\" formControlName=\"states\" aria-placeholder=\"Select States / Province\" *ngIf=\"states$ | async; let states; else loadingSelect\">\r\n            <option *ngFor=\"let state of states\" [value]=\"state\">{{ state }}</option>\r\n          </select>\r\n        </div>\r\n\r\n        <ng-template #loadingSelect>\r\n          <input readonly disabled class=\"form-control-plaintext\" type=\"text\" placeholder=\"Loading...\">\r\n        </ng-template>\r\n      </div>\r\n\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col form-group\">\r\n          <label>Birthday</label>\r\n          <div class=\"input-group\">\r\n            <input class=\"form-control\" placeholder=\"YYYY-MM-DD\" formControlName=\"birthDate\" ngbDatepicker #d=\"ngbDatepicker\" [maxDate]=\"maxDate\" [minDate]=\"minDate\">\r\n            <div class=\"input-group-append\">\r\n              <button class=\"btn btn-outline-secondary calendar\" (click)=\"d.toggle()\" type=\"button\">\r\n                <fa-icon [icon]=\"calendarIcon\"></fa-icon>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <ng-container *ngIf=\"userDetailsForm.get('birthDate').invalid && userDetailsForm.get('birthDate').touched\">\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('birthDate').errors.required\">This field is required.</span>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col form-group\">\r\n          <label>Password</label>\r\n          <input type=\"password\" class=\"form-control\" formControlName=\"password\">\r\n          <ng-container *ngIf=\"userDetailsForm.get('password').invalid && userDetailsForm.get('password').touched\">\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('password').errors.required\">This field is required.</span>\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('password').errors.minlength\">This field can not be less than {{userDetailsForm.get('password').errors.minlength.requiredLength}} characters.</span>\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('password').errors.maxlength\">This field can be at most {{userDetailsForm.get('password').errors.maxlength.requiredLength}} characters long.</span>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col form-group\">\r\n          <label>Confirm Password</label>\r\n          <input type=\"password\" class=\"form-control\" formControlName=\"confirm\">\r\n          <ng-container *ngIf=\"userDetailsForm.get('confirm').invalid && userDetailsForm.get('confirm').touched\">\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('confirm').errors.required\">This field is required.</span>\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('confirm').errors.minlength\">This field can not be less than {{userDetailsForm.get('confirm').errors.minlength.requiredLength}} characters.</span>\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('confirm').errors.maxlength\">This field can be at most {{userDetailsForm.get('confirm').errors.maxlength.requiredLength}} characters long.</span>\r\n            <span class=\"error\" *ngIf=\"userDetailsForm.get('confirm').errors.mustMatch\">Passwords do not match.</span>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n\r\n      <button class=\"btn btn-primary custom col\" [disabled]=\"userDetailsForm.invalid || isCreatingUser\" (click)=\"createUser()\">\r\n        <span *ngIf=\"isCreatingUser; else createButton\" class=\"loading\"></span>\r\n        <ng-template #createButton>Create</ng-template>\r\n      </button>\r\n\r\n    </div>\r\n  </ng-template>\r\n\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { NgbDatepickerModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nimport { UserCreateRoutingModule } from './user-create-routing.module';\r\nimport { UserCreateComponent } from './user-create.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [UserCreateComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UserCreateRoutingModule,\r\n    ReactiveFormsModule,\r\n    FontAwesomeModule,\r\n    NgbDatepickerModule\r\n  ],\r\n  exports: [\r\n    UserCreateComponent\r\n  ]\r\n})\r\nexport class UserCreateModule { }\r\n","import { NgbDate } from '@ng-bootstrap/ng-bootstrap';\r\nimport * as moment from 'moment';\r\n\r\nexport function ngbDateToMoment(date: NgbDate): moment.Moment {\r\n  return moment().year(date.year).month(date.month - 1).date(date.day);\r\n}\r\n\r\nexport function momentToNgbDate(date: moment.Moment): NgbDate {\r\n  return new NgbDate(date.year(), date.month() + 1, date.date());\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatchValidator(controlName: string, matchingControlName: string) {\r\n    return (formGroup: FormGroup) => {\r\n        const control = formGroup.controls[controlName];\r\n        const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n            // return if another validator has already found an error on the matchingControl\r\n            return;\r\n        }\r\n\r\n        // set error on matchingControl if validation fails\r\n        if (control.value !== matchingControl.value) {\r\n            matchingControl.setErrors({ mustMatch: true });\r\n        } else {\r\n            matchingControl.setErrors(null);\r\n        }\r\n    };\r\n}\r\n"]}